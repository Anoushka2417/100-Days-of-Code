class Solution{
    public:
    /*You are required to complete below method */
    long long int  countPS(string str)
    {
        int n=str.size() ;
        long long dp[n][n] ;
        int m=1e9+7 ;
        
        for(int gap=0 ; gap<n ; gap++)
        {
            for(int i=0,j=gap ; i<n-gap ; i++,j++)
            {
                if(gap==0)
                    dp[i][j]=1 ;
                else if(gap==1)
                {
                    if(str[i]==str[j])
                        dp[i][j]=3 ;
                    else
                        dp[i][j]=2 ;
                }
                else
                {
                    if(str[i]==str[j])
        //prefix subsequence count + suffix subsequence count + 1
                        dp[i][j] = (dp[i+1][j]+dp[i][j-1] + 1) ;
                    else    
        //prefix subsequence count + suffix subsequence count - subsequence count of middle
                        dp[i][j] = (dp[i+1][j]+dp[i][j-1]-dp[i+1][j-1]) ;
                }
                dp[i][j]%=m ;
            }
        }
        if(dp[0][n-1]<0)
            return dp[0][n-1]+m;
        else 
            return dp[0][n-1]%m;
    }
     
};
